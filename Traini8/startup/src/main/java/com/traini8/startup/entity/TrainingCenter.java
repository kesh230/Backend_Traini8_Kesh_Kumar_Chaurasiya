package com.traini8.startup.entity;

import java.util.List;

import jakarta.persistence.Column;
import jakarta.persistence.Embedded;
import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.Table;
import jakarta.validation.Valid;
import jakarta.validation.constraints.Email;
import jakarta.validation.constraints.Min;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.NotEmpty;
import jakarta.validation.constraints.Pattern;
import jakarta.validation.constraints.Size;
import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.RequiredArgsConstructor;
import lombok.Setter;

@Entity
@Getter
@Setter
@AllArgsConstructor
@RequiredArgsConstructor
@Table(name = "trainingCenter")
public class TrainingCenter {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @Column(nullable = false, unique = true)
    @NotBlank(message = "Center Name is required")
    @Size(max = 40, message = "Center Name must be less than 40 characters")
    private String centerName;

    @Column(nullable = false, unique = true)
    @NotBlank(message = "Center Code is required")
    @Pattern(regexp = "^[a-zA-Z0-9]{12}$", message = "Center Code must be exactly 12 alphanumeric characters")
    private String centerCode;

    // Here embedded class is used for not to create a extra table[Address]
    // Embedded annotation can help to add address class property in this table
    @Embedded
    @Valid
    private Address address;

    @Min(value = 1, message = "Student Capacity must be a positive number")
    private Integer studentCapacity;

    @NotEmpty(message = "At least one course must be provided")
    private List<@NotBlank(message = "Course name cannot be blank") String> coursesOffered;

    // Always generated by system when user created and cannot done any modification by user
    @Column(nullable = false, updatable = false)
    private long createdOn;
    
    @Column(nullable = false, unique = true)
    @Email(message = "Invalid email format")
    private String contactEmail;
    
    @Column(nullable = false, unique = true)
    @NotBlank(message = "Contact Phone is required")
    @Pattern(regexp = "\\d{10}", message = "Contact number must be exactly 10 digits")
    private String contactPhone;

}
